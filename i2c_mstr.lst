   1               		.file	"i2c_mstr.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  69               	.global	i2c_init
  71               	i2c_init:
   1:i2c_mstr.c    **** #ifndef  F_CPU
   2:i2c_mstr.c    **** #define F_CPU 16000000UL
   3:i2c_mstr.c    **** #endif
   4:i2c_mstr.c    **** 
   5:i2c_mstr.c    **** #include <avr/io.h>
   6:i2c_mstr.c    **** #include <util/twi.h>
   7:i2c_mstr.c    **** 
   8:i2c_mstr.c    **** #include "i2c_mstr.h"
   9:i2c_mstr.c    **** 
  10:i2c_mstr.c    **** #define F_SCL 100000UL // SCL frequency
  11:i2c_mstr.c    **** #define Prescaler 1
  12:i2c_mstr.c    **** #define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)
  13:i2c_mstr.c    **** 
  14:i2c_mstr.c    **** void i2c_init(void)
  15:i2c_mstr.c    **** {
  72               	_SP_L__
  73               		in r29,__SP_H__
  74               	/* prologue: function */
  75 0000 DF93      	/* frame size = 0 */
  77 0004 CDB7      	.LM1:
  78 0006 DEB7      		ldi r30,lo8(184)
  79               		ldi r31,hi8(184)
  80               		ldi r24,lo8(72)
  16:i2c_mstr.c    **** 	TWBR = (uint8_t)TWBR_val;
  81               	
  83 0008 E8EB      	.LM2:
  84 000a F0E0      		ldi r30,lo8(184)
  85 000c 88E4      		ldi r31,hi8(184)
  86 000e 8083      		ldi r24,lo8(10)
  17:i2c_mstr.c    **** 	TWBR = 10;
  87               	,r24
  88               	/* epilogue start */
  90 0012 F0E0      	.LM3:
  91 0014 8AE0      		pop r28
  92 0016 8083      		pop r29
  93               		ret
  18:i2c_mstr.c    **** }
  94               	i2c_init, .-i2c_init
  95               	.Lscope1:
  98 001c 0895      	.global	i2c_start
 100               	i2c_start:
 102               	.LM4:
 103               	.LFBB2:
 104               		push r29
 105               		push r28
  19:i2c_mstr.c    **** 
  20:i2c_mstr.c    **** uint8_t i2c_start(uint8_t address)
  21:i2c_mstr.c    **** {
 106               	sh __tmp_reg__
 107               		in r28,__SP_L__
 108               		in r29,__SP_H__
 109 001e DF93      	/* prologue: function */
 110 0020 CF93      	/* frame size = 3 */
 111 0022 00D0      		std Y+2,r24
 113 0026 CDB7      	.LM5:
 114 0028 DEB7      		ldi r30,lo8(188)
 115               		ldi r31,hi8(188)
 116               		st Z,__zero_reg__
  22:i2c_mstr.c    **** 	// reset TWI control register
  23:i2c_mstr.c    **** 	TWCR = 0;
 118               	30,lo8(188)
 119               		ldi r31,hi8(188)
 120 002c ECEB      		ldi r24,lo8(-92)
 121 002e F0E0      		st Z,r24
 122 0030 1082      	.L4:
  24:i2c_mstr.c    **** 	// transmit START condition
  25:i2c_mstr.c    **** 	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 123               	bn	68,0,27,.LM7-.LFBB2
 124               	.LM7:
 125 0032 ECEB      		ldi r30,lo8(188)
 126 0034 F0E0      		ldi r31,hi8(188)
 127 0036 84EA      		ld r24,Z
 128 0038 8083      		tst r24
 129               		brge .L4
  26:i2c_mstr.c    **** 	// wait for end of transmission
  27:i2c_mstr.c    **** 	while( !(TWCR & (1<<TWINT)) );
 130               		68,0,30,.LM8-.LFBB2
 131               	.LM8:
 132 003a ECEB      		ldi r30,lo8(185)
 133 003c F0E0      		ldi r31,hi8(185)
 134 003e 8081      		ld r24,Z
 135 0040 8823      		mov r24,r24
 136 0042 04F4      		ldi r25,lo8(0)
  28:i2c_mstr.c    **** 	
  29:i2c_mstr.c    **** 	// check if the start condition was successfully transmitted
  30:i2c_mstr.c    **** 	if((TWSR & 0xF8) != TW_START){ return 1; }
 137               	24,lo8(248)
 138               		andi r25,hi8(248)
 139 0044 E9EB      		cpi r24,8
 140 0046 F0E0      		cpc r25,__zero_reg__
 141 0048 8081      		breq .L5
 142 004a 882F      		ldi r24,lo8(1)
 143 004c 90E0      		std Y+3,r24
 144 004e 887F      		rjmp .L6
 145 0050 9070      	.L5:
 147 0054 9105      	.LM9:
 148 0056 01F0      		ldi r30,lo8(187)
 149 0058 81E0      		ldi r31,hi8(187)
 150 005a 8B83      		ldd r24,Y+2
 151 005c 00C0      		st Z,r24
  31:i2c_mstr.c    **** 	
  32:i2c_mstr.c    **** 	// load slave address into data register
  33:i2c_mstr.c    **** 	TWDR = address;
 153               	lo8(188)
 154               		ldi r31,hi8(188)
 155 005e EBEB      		ldi r24,lo8(-124)
 156 0060 F0E0      		st Z,r24
 157 0062 8A81      	.L7:
  34:i2c_mstr.c    **** 	// start transmission of address
  35:i2c_mstr.c    **** 	TWCR = (1<<TWINT) | (1<<TWEN);
 159               	
 160               		ldi r30,lo8(188)
 161 0066 ECEB      		ldi r31,hi8(188)
 162 0068 F0E0      		ld r24,Z
 163 006a 84E8      		tst r24
 164 006c 8083      		brge .L7
  36:i2c_mstr.c    **** 	// wait for end of transmission
  37:i2c_mstr.c    **** 	while( !(TWCR & (1<<TWINT)) );
 166               	
 167               		ldi r30,lo8(185)
 168 006e ECEB      		ldi r31,hi8(185)
 169 0070 F0E0      		ld r24,Z
 170 0072 8081      		andi r24,lo8(-8)
 171 0074 8823      		std Y+1,r24
  38:i2c_mstr.c    **** 	
  39:i2c_mstr.c    **** 	// check if the device has acknowledged the READ / WRITE mode
  40:i2c_mstr.c    **** 	uint8_t twst = TW_STATUS & 0xF8;
 173               	
 174               		ldd r24,Y+1
 175 0078 E9EB      		cpi r24,lo8(24)
 176 007a F0E0      		breq .L8
 177 007c 8081      		ldd r24,Y+1
 178 007e 887F      		cpi r24,lo8(64)
 179 0080 8983      		breq .L8
  41:i2c_mstr.c    **** 	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 180               	24,lo8(1)
 181               		std Y+3,r24
 182 0082 8981      		rjmp .L6
 183 0084 8831      	.L8:
 185 0088 8981      	.LM14:
 186 008a 8034      		std Y+3,__zero_reg__
 187 008c 01F0      	.L6:
 188 008e 81E0      		ldd r24,Y+3
 189 0090 8B83      	/* epilogue start */
 191               	.LM15:
  42:i2c_mstr.c    **** 	
  43:i2c_mstr.c    **** 	return 0;
 192               	eg__
 193               		pop __tmp_reg__
 194 0094 1B82      		pop __tmp_reg__
 195               		pop r28
 196 0096 8B81      		pop r29
 197               		ret
  44:i2c_mstr.c    **** }
 198               		i2c_start, .-i2c_start
 202 009c 0F90      	.Lscope2:
 205 00a2 0895      	.global	i2c_rep_start
 207               	i2c_rep_start:
 209               	.LM16:
 210               	.LFBB3:
 211               		push r29
 212               		push r28
 213               		rcall .
 214               		push __tmp_reg__
 215               		in r28,__SP_L__
  45:i2c_mstr.c    **** 
  46:i2c_mstr.c    **** 
  47:i2c_mstr.c    **** uint8_t i2c_rep_start(uint8_t address)
  48:i2c_mstr.c    **** {
 216               	* prologue: function */
 217               	/* frame size = 3 */
 218               		std Y+2,r24
 220 00a6 CF93      	.LM17:
 221 00a8 00D0      		ldi r30,lo8(188)
 222 00aa 0F92      		ldi r31,hi8(188)
 223 00ac CDB7      		ldi r24,lo8(-92)
 224 00ae DEB7      		st Z,r24
 225               	.L11:
 227 00b0 8A83      	.LM18:
  49:i2c_mstr.c    **** 	// reset TWI control register
  50:i2c_mstr.c    **** 	// TWCR = 0;
  51:i2c_mstr.c    **** 	// transmit START condition
  52:i2c_mstr.c    **** 	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 228               	(188)
 229               		ldi r31,hi8(188)
 230 00b2 ECEB      		ld r24,Z
 231 00b4 F0E0      		tst r24
 232 00b6 84EA      		brge .L11
 234               	.LM19:
  53:i2c_mstr.c    **** 	// wait for end of transmission
  54:i2c_mstr.c    **** 	while( !(TWCR & (1<<TWINT)) );
 235               	0,lo8(185)
 236               		ldi r31,hi8(185)
 237 00ba ECEB      		ld r24,Z
 238 00bc F0E0      		mov r24,r24
 239 00be 8081      		ldi r25,lo8(0)
 240 00c0 8823      		andi r24,lo8(248)
 241 00c2 04F4      		andi r25,hi8(248)
  55:i2c_mstr.c    **** 	
  56:i2c_mstr.c    **** 	// check if the start condition was successfully transmitted
  57:i2c_mstr.c    **** 	if((TWSR & 0xF8) != TW_REP_START){ return 1; }
 242               	4,16
 243               		cpc r25,__zero_reg__
 244 00c4 E9EB      		breq .L12
 245 00c6 F0E0      		ldi r24,lo8(1)
 246 00c8 8081      		std Y+3,r24
 247 00ca 882F      		rjmp .L13
 248 00cc 90E0      	.L12:
 250 00d0 9070      	.LM20:
 251 00d2 8031      		ldi r30,lo8(187)
 252 00d4 9105      		ldi r31,hi8(187)
 253 00d6 01F0      		ldd r24,Y+2
 254 00d8 81E0      		st Z,r24
 256 00dc 00C0      	.LM21:
 257               		ldi r30,lo8(188)
  58:i2c_mstr.c    **** 	
  59:i2c_mstr.c    **** 	// load slave address into data register
  60:i2c_mstr.c    **** 	TWDR = address;
 258               	)
 259               		ldi r24,lo8(-124)
 260 00de EBEB      		st Z,r24
 261 00e0 F0E0      	.L14:
 263 00e4 8083      	.LM22:
  61:i2c_mstr.c    **** 	// start transmission of address
  62:i2c_mstr.c    **** 	TWCR = (1<<TWINT) | (1<<TWEN);
 264               	30,lo8(188)
 265               		ldi r31,hi8(188)
 266 00e6 ECEB      		ld r24,Z
 267 00e8 F0E0      		tst r24
 268 00ea 84E8      		brge .L14
 270               	.LM23:
  63:i2c_mstr.c    **** 	// wait for end of transmission
  64:i2c_mstr.c    **** 	while( !(TWCR & (1<<TWINT)) );
 271               	0,lo8(185)
 272               		ldi r31,hi8(185)
 273 00ee ECEB      		ld r24,Z
 274 00f0 F0E0      		andi r24,lo8(-8)
 275 00f2 8081      		std Y+1,r24
 277 00f6 04F4      	.LM24:
  65:i2c_mstr.c    **** 	
  66:i2c_mstr.c    **** 	// check if the device has acknowledged the READ / WRITE mode
  67:i2c_mstr.c    **** 	uint8_t twst = TW_STATUS & 0xF8;
 278               	4,Y+1
 279               		cpi r24,lo8(24)
 280 00f8 E9EB      		breq .L15
 281 00fa F0E0      		ldd r24,Y+1
 282 00fc 8081      		cpi r24,lo8(64)
 283 00fe 887F      		breq .L15
 284 0100 8983      		ldi r24,lo8(1)
  68:i2c_mstr.c    **** 	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 285               	3,r24
 286               		rjmp .L13
 287 0102 8981      	.L15:
 289 0106 01F0      	.LM25:
 290 0108 8981      		std Y+3,__zero_reg__
 291 010a 8034      	.L13:
 292 010c 01F0      		ldd r24,Y+3
 293 010e 81E0      	/* epilogue start */
 295 0112 00C0      	.LM26:
 296               		pop __tmp_reg__
  69:i2c_mstr.c    **** 	
  70:i2c_mstr.c    **** 	return 0;
 297               	eg__
 298               		pop __tmp_reg__
 299 0114 1B82      		pop r28
 300               		pop r29
 301 0116 8B81      		ret
  71:i2c_mstr.c    **** }
 303               	s	"twst:(4,2)",128,0,0,1
 306 011a 0F90      	.Lscope3:
 309 0120 DF91      	.global	i2c_write
 311               	i2c_write:
 313               	.LM27:
 314               	.LFBB4:
 315               		push r29
 316               		push r28
 317               		rcall .
 318               		in r28,__SP_L__
 319               		in r29,__SP_H__
 320               	/* prologue: function */
  72:i2c_mstr.c    **** 
  73:i2c_mstr.c    **** 
  74:i2c_mstr.c    **** uint8_t i2c_write(uint8_t data)
  75:i2c_mstr.c    **** {
 321               	*/
 322               		std Y+1,r24
 324 0124 DF93      	.LM28:
 325 0126 CF93      		ldi r30,lo8(187)
 326 0128 00D0      		ldi r31,hi8(187)
 327 012a CDB7      		ldd r24,Y+1
 328 012c DEB7      		st Z,r24
 330               	.LM29:
 331 012e 8983      		ldi r30,lo8(188)
  76:i2c_mstr.c    **** 	// load data into data register
  77:i2c_mstr.c    **** 	TWDR = data;
 332               	8(188)
 333               		ldi r24,lo8(-124)
 334 0130 EBEB      		st Z,r24
 335 0132 F0E0      	.L18:
 337 0136 8083      	.LM30:
  78:i2c_mstr.c    **** 	// start transmission of data
  79:i2c_mstr.c    **** 	TWCR = (1<<TWINT) | (1<<TWEN);
 338               	30,lo8(188)
 339               		ldi r31,hi8(188)
 340 0138 ECEB      		ld r24,Z
 341 013a F0E0      		tst r24
 342 013c 84E8      		brge .L18
 344               	.LM31:
  80:i2c_mstr.c    **** 	// wait for end of transmission
  81:i2c_mstr.c    **** 	while( !(TWCR & (1<<TWINT)) );
 345               	0,lo8(185)
 346               		ldi r31,hi8(185)
 347 0140 ECEB      		ld r24,Z
 348 0142 F0E0      		mov r24,r24
 349 0144 8081      		ldi r25,lo8(0)
 350 0146 8823      		andi r24,lo8(248)
 351 0148 04F4      		andi r25,hi8(248)
  82:i2c_mstr.c    **** 	
  83:i2c_mstr.c    **** 	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
 352               	4,40
 353               		cpc r25,__zero_reg__
 354 014a E9EB      		breq .L19
 355 014c F0E0      		ldi r24,lo8(1)
 356 014e 8081      		std Y+2,r24
 357 0150 882F      		rjmp .L20
 358 0152 90E0      	.L19:
 360 0156 9070      	.LM32:
 361 0158 8832      		std Y+2,__zero_reg__
 362 015a 9105      	.L20:
 363 015c 01F0      		ldd r24,Y+2
 364 015e 81E0      	/* epilogue start */
 366 0162 00C0      	.LM33:
 367               		pop __tmp_reg__
  84:i2c_mstr.c    **** 	
  85:i2c_mstr.c    **** 	return 0;
 368               	
 369               		pop r28
 370 0164 1A82      		pop r29
 371               		ret
 373               	.Lscope4:
  86:i2c_mstr.c    **** }
 374               	bs	"i2c_read_ack:F(4,2)",36,0,0,i2c_read_ack
 375               	.global	i2c_read_ack
 377 016a 0F90      	i2c_read_ack:
 379 016e DF91      	.LM34:
 380 0170 0895      	.LFBB5:
 381               		push r29
 382               		push r28
 383               		in r28,__SP_L__
 384               		in r29,__SP_H__
 385               	/* prologue: function */
 386               	/* frame size = 0 */
  87:i2c_mstr.c    **** 
  88:i2c_mstr.c    **** uint8_t i2c_read_ack(void)
  89:i2c_mstr.c    **** {
 387               	92,.LM35-.LFBB5
 388               	.LM35:
 389               		ldi r30,lo8(188)
 390 0172 DF93      		ldi r31,hi8(188)
 391 0174 CF93      		ldi r24,lo8(-60)
 392 0176 CDB7      		st Z,r24
 393 0178 DEB7      	.L23:
 395               	.LM36:
  90:i2c_mstr.c    **** 	
  91:i2c_mstr.c    **** 	// start TWI module and acknowledge data after reception
  92:i2c_mstr.c    **** 	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 396               	lo8(188)
 397               		ldi r31,hi8(188)
 398 017a ECEB      		ld r24,Z
 399 017c F0E0      		tst r24
 400 017e 84EC      		brge .L23
 402               	.LM37:
  93:i2c_mstr.c    **** 	// wait for end of transmission
  94:i2c_mstr.c    **** 	while( !(TWCR & (1<<TWINT)) );
 403               	0,lo8(187)
 404               		ldi r31,hi8(187)
 405 0182 ECEB      		ld r24,Z
 406 0184 F0E0      	/* epilogue start */
 408 0188 8823      	.LM38:
 409 018a 04F4      		pop r28
  95:i2c_mstr.c    **** 	// return received data from TWDR
  96:i2c_mstr.c    **** 	return TWDR;
 410               	9
 411               		ret
 413 018e F0E0      	.Lscope5:
 415               	.global	i2c_read_nack
  97:i2c_mstr.c    **** }
 416               		i2c_read_nack, @function
 417               	i2c_read_nack:
 419 0194 DF91      	.LM39:
 420 0196 0895      	.LFBB6:
 421               		push r29
 422               		push r28
 423               		in r28,__SP_L__
 424               		in r29,__SP_H__
 425               	/* prologue: function */
 426               	/* frame size = 0 */
  98:i2c_mstr.c    **** 
  99:i2c_mstr.c    **** uint8_t i2c_read_nack(void)
 100:i2c_mstr.c    **** {
 427               	0,103,.LM40-.LFBB6
 428               	.LM40:
 429               		ldi r30,lo8(188)
 430 0198 DF93      		ldi r31,hi8(188)
 431 019a CF93      		ldi r24,lo8(-124)
 432 019c CDB7      		st Z,r24
 433 019e DEB7      	.L26:
 435               	.LM41:
 101:i2c_mstr.c    **** 	
 102:i2c_mstr.c    **** 	// start receiving without acknowledging reception
 103:i2c_mstr.c    **** 	TWCR = (1<<TWINT) | (1<<TWEN);
 436               	lo8(188)
 437               		ldi r31,hi8(188)
 438 01a0 ECEB      		ld r24,Z
 439 01a2 F0E0      		tst r24
 440 01a4 84E8      		brge .L26
 442               	.LM42:
 104:i2c_mstr.c    **** 	// wait for end of transmission
 105:i2c_mstr.c    **** 	while( !(TWCR & (1<<TWINT)) );
 443               	0,lo8(187)
 444               		ldi r31,hi8(187)
 445 01a8 ECEB      		ld r24,Z
 446 01aa F0E0      	/* epilogue start */
 448 01ae 8823      	.LM43:
 449 01b0 04F4      		pop r28
 106:i2c_mstr.c    **** 	// return received data from TWDR
 107:i2c_mstr.c    **** 	return TWDR;
 450               	9
 451               		ret
 453 01b4 F0E0      	.Lscope6:
 108:i2c_mstr.c    **** }
 456               	s	"data:p(0,16)=*(4,2)",160,0,0,4
 458 01b8 CF91      	.global	i2c_transmit
 460 01bc 0895      	i2c_transmit:
 462               	.LM44:
 463               	.LFBB7:
 464               		push r29
 465               		push r28
 466               		in r28,__SP_L__
 467               		in r29,__SP_H__
 468               		sbiw r28,8
 469               		in __tmp_reg__,__SREG__
 109:i2c_mstr.c    **** 
 110:i2c_mstr.c    **** uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
 111:i2c_mstr.c    **** {
 470               	_H__,r29
 471               		out __SREG__,__tmp_reg__
 472               		out __SP_L__,r28
 473 01be DF93      	/* prologue: function */
 474 01c0 CF93      	/* frame size = 8 */
 475 01c2 CDB7      		std Y+3,r24
 476 01c4 DEB7      		std Y+5,r23
 477 01c6 2897      		std Y+4,r22
 478 01c8 0FB6      		std Y+7,r21
 479 01ca F894      		std Y+6,r20
 481 01ce 0FBE      	.LM45:
 482 01d0 CDBF      		ldd r24,Y+3
 483               		call i2c_start
 484               		tst r24
 485 01d2 8B83      		breq .L29
 486 01d4 7D83      		ldi r24,lo8(1)
 487 01d6 6C83      		std Y+8,r24
 488 01d8 5F83      		rjmp .L30
 489 01da 4E83      	.L29:
 112:i2c_mstr.c    **** 	if (i2c_start(address | I2C_WRITE)) return 1;
 490               	114,.LM46-.LFBB7
 491               	.LM46:
 492 01dc 8B81      		std Y+2,__zero_reg__
 493 01de 0E94 0000 		std Y+1,__zero_reg__
 494 01e2 8823      		rjmp .L31
 495 01e4 01F0      	.L33:
 497 01e8 8887      	.LM47:
 498 01ea 00C0      		ldd r18,Y+4
 499               		ldd r19,Y+5
 500               		ldd r24,Y+1
 113:i2c_mstr.c    **** 	
 114:i2c_mstr.c    **** 	for (uint16_t i = 0; i < length; i++)
 501               	2
 502               		movw r30,r18
 503 01ec 1A82      		add r30,r24
 504 01ee 1982      		adc r31,r25
 505 01f0 00C0      		ld r24,Z
 506               		call i2c_write
 115:i2c_mstr.c    **** 	{
 116:i2c_mstr.c    **** 		if (i2c_write(data[i])) return 1;
 507               	24
 508               		breq .L32
 509 01f2 2C81      		ldi r24,lo8(1)
 510 01f4 3D81      		std Y+8,r24
 511 01f6 8981      		rjmp .L30
 512 01f8 9A81      	.L32:
 514 01fc E80F      	.LM48:
 515 01fe F91F      		ldd r24,Y+1
 516 0200 8081      		ldd r25,Y+2
 517 0202 0E94 0000 		adiw r24,1
 518 0206 8823      		std Y+2,r25
 519 0208 01F0      		std Y+1,r24
 520 020a 81E0      	.L31:
 521 020c 8887      		ldd r18,Y+1
 522 020e 00C0      		ldd r19,Y+2
 523               		ldd r24,Y+6
 524               		ldd r25,Y+7
 525               		cp r18,r24
 526 0210 8981      		cpc r19,r25
 527 0212 9A81      		brlo .L33
 528 0214 0196      	.LBE2:
 530 0218 8983      	.LM49:
 531               		call i2c_stop
 533 021c 3A81      	.LM50:
 534 021e 8E81      		std Y+8,__zero_reg__
 535 0220 9F81      	.L30:
 536 0222 2817      		ldd r24,Y+8
 537 0224 3907      	/* epilogue start */
 539               	.LM51:
 117:i2c_mstr.c    **** 	}
 118:i2c_mstr.c    **** 	
 119:i2c_mstr.c    **** 	i2c_stop();
 540               	G__
 541               		cli
 542 0228 0E94 0000 		out __SP_H__,r29
 120:i2c_mstr.c    **** 	
 121:i2c_mstr.c    **** 	return 0;
 543               	t __SREG__,__tmp_reg__
 544               		out __SP_L__,r28
 545 022c 1886      		pop r28
 546               		pop r29
 547 022e 8885      		ret
 122:i2c_mstr.c    **** }
 549               	s	"i:(4,4)",128,0,0,1
 552 0232 0FB6      	.Lscope7:
 557 023c CF91      	.global	i2c_receive
 559 0240 0895      	i2c_receive:
 561               	.LM52:
 562               	.LFBB8:
 563               		push r16
 564               		push r17
 565               		push r29
 566               		push r28
 567               		in r28,__SP_L__
 568               		in r29,__SP_H__
 569               		sbiw r28,8
 570               		in __tmp_reg__,__SREG__
 571               		cli
 123:i2c_mstr.c    **** 
 124:i2c_mstr.c    **** uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
 125:i2c_mstr.c    **** {
 572               	__SREG__,__tmp_reg__
 573               		out __SP_L__,r28
 574               	/* prologue: function */
 575 0242 0F93      	/* frame size = 8 */
 576 0244 1F93      		std Y+3,r24
 577 0246 DF93      		std Y+5,r23
 578 0248 CF93      		std Y+4,r22
 579 024a CDB7      		std Y+7,r21
 580 024c DEB7      		std Y+6,r20
 582 0250 0FB6      	.LM53:
 583 0252 F894      		ldd r24,Y+3
 584 0254 DEBF      		ori r24,lo8(1)
 585 0256 0FBE      		call i2c_start
 586 0258 CDBF      		tst r24
 587               		breq .L36
 588               		ldi r24,lo8(1)
 589 025a 8B83      		std Y+8,r24
 590 025c 7D83      		rjmp .L37
 591 025e 6C83      	.L36:
 592 0260 5F83      	.LBB3:
 126:i2c_mstr.c    **** 	if (i2c_start(address | I2C_READ)) return 1;
 594               	_reg__
 595               		std Y+1,__zero_reg__
 596 0264 8B81      		rjmp .L38
 597 0266 8160      	.L39:
 599 026c 8823      	.LM55:
 600 026e 01F0      		ldd r18,Y+4
 601 0270 81E0      		ldd r19,Y+5
 602 0272 8887      		ldd r24,Y+1
 603 0274 00C0      		ldd r25,Y+2
 604               		movw r16,r18
 605               		add r16,r24
 127:i2c_mstr.c    **** 	
 128:i2c_mstr.c    **** 	for (uint16_t i = 0; i < (length-1); i++)
 606               	
 607               		call i2c_read_ack
 608 0276 1A82      		movw r30,r16
 609 0278 1982      		st Z,r24
 611               	.LM56:
 129:i2c_mstr.c    **** 	{
 130:i2c_mstr.c    **** 		data[i] = i2c_read_ack();
 612               	r24,Y+1
 613               		ldd r25,Y+2
 614 027c 2C81      		adiw r24,1
 615 027e 3D81      		std Y+2,r25
 616 0280 8981      		std Y+1,r24
 617 0282 9A81      	.L38:
 618 0284 8901      		ldd r24,Y+6
 619 0286 080F      		ldd r25,Y+7
 620 0288 191F      		movw r18,r24
 621 028a 0E94 0000 		subi r18,lo8(-(-1))
 622 028e F801      		sbci r19,hi8(-(-1))
 623 0290 8083      		ldd r24,Y+1
 624               		ldd r25,Y+2
 625               		cp r24,r18
 626 0292 8981      		cpc r25,r19
 627 0294 9A81      		brlo .L39
 628 0296 0196      	.LBE3:
 630 029a 8983      	.LM57:
 631               		ldd r24,Y+6
 632 029c 8E81      		ldd r25,Y+7
 633 029e 9F81      		movw r18,r24
 634 02a0 9C01      		subi r18,lo8(-(-1))
 635 02a2 2150      		sbci r19,hi8(-(-1))
 636 02a4 3040      		ldd r24,Y+4
 637 02a6 8981      		ldd r25,Y+5
 638 02a8 9A81      		movw r16,r24
 639 02aa 8217      		add r16,r18
 640 02ac 9307      		adc r17,r19
 641 02ae 00F0      		call i2c_read_nack
 642               		movw r30,r16
 131:i2c_mstr.c    **** 	}
 132:i2c_mstr.c    **** 	data[(length-1)] = i2c_read_nack();
 643               	8-.LFBB8
 644               	.LM58:
 645 02b0 8E81      		call i2c_stop
 647 02b4 9C01      	.LM59:
 648 02b6 2150      		std Y+8,__zero_reg__
 649 02b8 3040      	.L37:
 650 02ba 8C81      		ldd r24,Y+8
 651 02bc 9D81      	/* epilogue start */
 653 02c0 020F      	.LM60:
 654 02c2 131F      		adiw r28,8
 655 02c4 0E94 0000 		in __tmp_reg__,__SREG__
 656 02c8 F801      		cli
 657 02ca 8083      		out __SP_H__,r29
 133:i2c_mstr.c    **** 	
 134:i2c_mstr.c    **** 	i2c_stop();
 658               	_tmp_reg__
 659               		out __SP_L__,r28
 660 02cc 0E94 0000 		pop r28
 135:i2c_mstr.c    **** 	
 136:i2c_mstr.c    **** 	return 0;
 661               	p r29
 662               		pop r17
 663 02d0 1886      		pop r16
 664               		ret
 137:i2c_mstr.c    **** }
 667               	n	192,0,0,.LBB3-.LFBB8
 669 02d4 2896      	.Lscope8:
 675 02e0 CF91      	.global	i2c_writeReg
 677 02e4 1F91      	i2c_writeReg:
 679 02e8 0895      	.LM61:
 680               	.LFBB9:
 681               		push r29
 682               		push r28
 683               		in r28,__SP_L__
 684               		in r29,__SP_H__
 685               		sbiw r28,9
 686               		in __tmp_reg__,__SREG__
 687               		cli
 688               		out __SP_H__,r29
 689               		out __SREG__,__tmp_reg__
 690               		out __SP_L__,r28
 691               	/* prologue: function */
 692               	/* frame size = 9 */
 138:i2c_mstr.c    **** 
 139:i2c_mstr.c    **** uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
 140:i2c_mstr.c    **** {
 693               		std Y+6,r21
 694               		std Y+5,r20
 695               		std Y+8,r19
 696 02ea DF93      		std Y+7,r18
 698 02ee CDB7      	.LM62:
 699 02f0 DEB7      		ldd r24,Y+3
 700 02f2 2997      		call i2c_start
 701 02f4 0FB6      		tst r24
 702 02f6 F894      		breq .L42
 703 02f8 DEBF      		ldi r24,lo8(1)
 704 02fa 0FBE      		std Y+9,r24
 705 02fc CDBF      		rjmp .L43
 706               	.L42:
 708 02fe 8B83      	.LM63:
 709 0300 6C83      		ldd r24,Y+4
 710 0302 5E83      		call i2c_write
 711 0304 4D83      	.LBB4:
 713 0308 2F83      	.LM64:
 141:i2c_mstr.c    **** 	if (i2c_start(devaddr | 0x00)) return 1;
 714               	1,.LM62-.LFBB9
 715               	.LM62:
 716 030a 8B81      		ldd r24,Y+3
 717 030c 0E94 0000 		call i2c_start
 718 0310 8823      		tst r24
 719 0312 01F0      		breq .L42
 720 0314 81E0      		ldi r24,lo8(1)
 721 0316 8987      		std Y+9,r24
 722 0318 00C0      		rjmp .L43
 723               	.L42:
 142:i2c_mstr.c    **** 
 143:i2c_mstr.c    **** 	i2c_write(regaddr);
 724               	*/
 725               	/* frame size = 9 */
 726 031a 8C81      		std Y+3,r24
 727 031c 0E94 0000 		std Y+4,r22
 728               		std Y+6,r21
 144:i2c_mstr.c    **** 
 145:i2c_mstr.c    **** 	for (uint16_t i = 0; i < length; i++)
 729               	B9:
 730               		push r29
 731 0320 1A82      		push r28
 732 0322 1982      		in r28,__SP_L__
 733 0324 00C0      		in r29,__SP_H__
 734               		sbiw r28,9
 146:i2c_mstr.c    **** 	{
 147:i2c_mstr.c    **** 		if (i2c_write(data[i])) return 1;
 735               	tmp_reg__,__SREG__
 736               		cli
 737 0326 2D81      		out __SP_H__,r29
 738 0328 3E81      		out __SREG__,__tmp_reg__
 739 032a 8981      		out __SP_L__,r28
 740 032c 9A81      	/* prologue: function */
 741 032e F901      	/* frame size = 9 */
 742 0330 E80F      		std Y+3,r24
 743 0332 F91F      		std Y+4,r22
 744 0334 8081      		std Y+6,r21
 745 0336 0E94 0000 		std Y+5,r20
 746 033a 8823      		std Y+8,r19
 747 033c 01F0      		std Y+7,r18
 749 0340 8987      	.LM62:
 750 0342 00C0      		ldd r24,Y+3
 751               		call i2c_start
 752               		tst r24
 753               		breq .L42
 754 0344 8981      		ldi r24,lo8(1)
 755 0346 9A81      		std Y+9,r24
 756 0348 0196      		rjmp .L43
 757 034a 9A83      	.L42:
 759               	.LM63:
 760 034e 2981      		ldd r24,Y+4
 761 0350 3A81      		call i2c_write
 762 0352 8F81      	.LBB4:
 764 0356 2817      	.LM64:
 765 0358 3907      		std Y+2,__zero_reg__
 766 035a 00F0      		std Y+1,__zero_reg__
 767               		rjmp .L44
 148:i2c_mstr.c    **** 	}
 149:i2c_mstr.c    **** 
 150:i2c_mstr.c    **** 	i2c_stop();
 768               	4
 769               		breq .L42
 770 035c 0E94 0000 		ldi r24,lo8(1)
 151:i2c_mstr.c    **** 
 152:i2c_mstr.c    **** 	return 0;
 771               	SP_L__,r28
 772               	/* prologue: function */
 773 0360 1986      	/* frame size = 9 */
 774               		std Y+3,r24
 775 0362 8985      		std Y+4,r22
 776               		std Y+6,r21
 153:i2c_mstr.c    **** }
 777               	B9:
 778               		push r29
 779 0364 2996      		push r28
 780 0366 0FB6      		in r28,__SP_L__
 781 0368 F894      		in r29,__SP_H__
 782 036a DEBF      		sbiw r28,9
 783 036c 0FBE      		in __tmp_reg__,__SREG__
 784 036e CDBF      		cli
 785 0370 CF91      		out __SP_H__,r29
 786 0372 DF91      		out __SREG__,__tmp_reg__
 787 0374 0895      		out __SP_L__,r28
 788               	/* prologue: function */
 789               	/* frame size = 9 */
 790               		std Y+3,r24
 791               		std Y+4,r22
 792               		std Y+6,r21
 793               		std Y+5,r20
 794               		std Y+8,r19
 795               		std Y+7,r18
 797               	.LM62:
 798               		ldd r24,Y+3
 799               		call i2c_start
 800               		tst r24
 154:i2c_mstr.c    **** 
 155:i2c_mstr.c    **** uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
 156:i2c_mstr.c    **** {
 801               	1)
 802               		std Y+9,r24
 803               		rjmp .L43
 804 0376 0F93      	.L42:
 806 037a DF93      	.LM63:
 807 037c CF93      		ldd r24,Y+4
 808 037e CDB7      		call i2c_write
 809 0380 DEB7      	.LBB4:
 811 0384 0FB6      	.LM64:
 812 0386 F894      		std Y+2,__zero_reg__
 813 0388 DEBF      		std Y+1,__zero_reg__
 814 038a 0FBE      		rjmp .L44
 815 038c CDBF      	.L46:
 817               	.LM65:
 818 038e 8B83      		ldd r18,Y+5
 819 0390 6C83      		ldd r19,Y+6
 820 0392 5E83      		ldd r24,Y+1
 821 0394 4D83      		ldd r25,Y+2
 822 0396 3887      		movw r30,r18
 823 0398 2F83      		add r30,r24
 157:i2c_mstr.c    **** 	if (i2c_start(devaddr)) return 1;
 824               	
 826 039a 8B81      	.LM64:
 827 039c 0E94 0000 		std Y+2,__zero_reg__
 828 03a0 8823      		std Y+1,__zero_reg__
 829 03a2 01F0      		rjmp .L44
 830 03a4 81E0      	.L46:
 832 03a8 00C0      	.LM65:
 833               		ldd r18,Y+5
 158:i2c_mstr.c    **** 
 159:i2c_mstr.c    **** 	i2c_write(regaddr);
 835               	.LM63:
 836 03aa 8C81      		ldd r24,Y+4
 837 03ac 0E94 0000 		call i2c_write
 160:i2c_mstr.c    **** 
 161:i2c_mstr.c    **** 	if (i2c_start(devaddr | 0x01)) return 1;
 838               	5,r20
 839               		std Y+8,r19
 840 03b0 8B81      		std Y+7,r18
 842 03b4 0E94 0000 	.LM62:
 843 03b8 8823      		ldd r24,Y+3
 844 03ba 01F0      		call i2c_start
 845 03bc E1E0      		tst r24
 846 03be E987      		breq .L42
 847 03c0 00C0      		ldi r24,lo8(1)
 848               		std Y+9,r24
 849               		rjmp .L43
 162:i2c_mstr.c    **** 
 163:i2c_mstr.c    **** 	for (uint16_t i = 0; i < (length-1); i++)
 850               	nction */
 851               	/* frame size = 9 */
 852 03c2 1A82      		std Y+3,r24
 853 03c4 1982      		std Y+4,r22
 854 03c6 00C0      		std Y+6,r21
 855               		std Y+5,r20
 164:i2c_mstr.c    **** 	{
 165:i2c_mstr.c    **** 		data[i] = i2c_read_ack();
 856               		push r28
 857               		in r28,__SP_L__
 858 03c8 2D81      		in r29,__SP_H__
 859 03ca 3E81      		sbiw r28,9
 860 03cc 8981      		in __tmp_reg__,__SREG__
 861 03ce 9A81      		cli
 862 03d0 8901      		out __SP_H__,r29
 863 03d2 080F      		out __SREG__,__tmp_reg__
 864 03d4 191F      		out __SP_L__,r28
 865 03d6 0E94 0000 	/* prologue: function */
 866 03da F801      	/* frame size = 9 */
 867 03dc 8083      		std Y+3,r24
 868               		std Y+4,r22
 869               		std Y+6,r21
 870 03de 8981      		std Y+5,r20
 871 03e0 9A81      		std Y+8,r19
 872 03e2 0196      		std Y+7,r18
 874 03e6 8983      	.LM62:
 875               		ldd r24,Y+3
 876 03e8 8F81      		call i2c_start
 877 03ea 9885      		tst r24
 878 03ec 9C01      		breq .L42
 879 03ee 2150      		ldi r24,lo8(1)
 880 03f0 3040      		std Y+9,r24
 881 03f2 8981      		rjmp .L43
 882 03f4 9A81      	.L42:
 884 03f8 9307      	.LM63:
 885 03fa 00F0      		ldd r24,Y+4
 886               		call i2c_write
 166:i2c_mstr.c    **** 	}
 167:i2c_mstr.c    **** 	data[(length-1)] = i2c_read_nack();
 887               	LFBB9
 888               	.LM64:
 889 03fc 8F81      		std Y+2,__zero_reg__
 890 03fe 9885      		std Y+1,__zero_reg__
 891 0400 9C01      		rjmp .L44
 892 0402 2150      	.L46:
 894 0406 8D81      	.LM65:
 895 0408 9E81      		ldd r18,Y+5
 896 040a 8C01      		ldd r19,Y+6
 897 040c 020F      		ldd r24,Y+1
 898 040e 131F      		ldd r25,Y+2
 899 0410 0E94 0000 		movw r30,r18
 900 0414 F801      		add r30,r24
 901 0416 8083      		adc r31,r25
 168:i2c_mstr.c    **** 
 169:i2c_mstr.c    **** 	i2c_stop();
 902               	145,.LM64-.LFBB9
 903               	.LM64:
 904 0418 0E94 0000 		std Y+2,__zero_reg__
 170:i2c_mstr.c    **** 
 171:i2c_mstr.c    **** 	return 0;
 905               	ldd r24,Y+3
 906               		call i2c_start
 907 041c 1986      		tst r24
 908               		breq .L42
 909 041e 8985      		ldi r24,lo8(1)
 910               		std Y+9,r24
 172:i2c_mstr.c    **** }
 911               	prologue: function */
 912               	/* frame size = 9 */
 913 0420 2996      		std Y+3,r24
 914 0422 0FB6      		std Y+4,r22
 915 0424 F894      		std Y+6,r21
 916 0426 DEBF      		std Y+5,r20
 917 0428 0FBE      		std Y+8,r19
 918 042a CDBF      		std Y+7,r18
 920 042e DF91      	.LM62:
 921 0430 1F91      		ldd r24,Y+3
 922 0432 0F91      		call i2c_start
 923 0434 0895      		tst r24
 924               		breq .L42
 925               		ldi r24,lo8(1)
 926               		std Y+9,r24
 927               		rjmp .L43
 928               	.L42:
 930               	.LM63:
 931               		ldd r24,Y+4
 932               		call i2c_write
 173:i2c_mstr.c    **** 
 174:i2c_mstr.c    **** void i2c_stop(void)
 175:i2c_mstr.c    **** {
 933               	5,r20
 934               		std Y+8,r19
 935               		std Y+7,r18
 937 0438 CF93      	.LM62:
 938 043a CDB7      		ldd r24,Y+3
 939 043c DEB7      		call i2c_start
 940               		tst r24
 941               		breq .L42
 176:i2c_mstr.c    **** 	// transmit STOP condition
 177:i2c_mstr.c    **** 	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 942               	tmp_reg__
 943               		out __SP_L__,r28
 944 043e ECEB      	/* prologue: function */
 945 0440 F0E0      	/* frame size = 9 */
 946 0442 84E9      		std Y+3,r24
 947 0444 8083      		std Y+4,r22
 948               		std Y+6,r21
 178:i2c_mstr.c    **** }
 949               	B9:
 950               		push r29
 951 0446 CF91      		push r28
 952 0448 DF91      		in r28,__SP_L__
 953 044a 0895      		in r29,__SP_H__
 954               		sbiw r28,9
 955               		in __tmp_reg__,__SREG__
 956               		cli
 957               		out __SP_H__,r29
DEFINED SYMBOLS
                            *ABS*:00000000 i2c_mstr.c
C:\Users\Thorsten\AppData\Local\Temp/ccnpLxT9.s:2      *ABS*:0000003f __SREG__
C:\Users\Thorsten\AppData\Local\Temp/ccnpLxT9.s:3      *ABS*:0000003e __SP_H__
C:\Users\Thorsten\AppData\Local\Temp/ccnpLxT9.s:4      *ABS*:0000003d __SP_L__
C:\Users\Thorsten\AppData\Local\Temp/ccnpLxT9.s:5      *ABS*:00000034 __CCP__
C:\Users\Thorsten\AppData\Local\Temp/ccnpLxT9.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\Thorsten\AppData\Local\Temp/ccnpLxT9.s:7      *ABS*:00000001 __zero_reg__
C:\Users\Thorsten\AppData\Local\Temp/ccnpLxT9.s:71     .text:00000000 i2c_init
C:\Users\Thorsten\AppData\Local\Temp/ccnpLxT9.s:105    .text:0000001e i2c_start
C:\Users\Thorsten\AppData\Local\Temp/ccnpLxT9.s:215    .text:000000a4 i2c_rep_start
C:\Users\Thorsten\AppData\Local\Temp/ccnpLxT9.s:320    .text:00000124 i2c_write
C:\Users\Thorsten\AppData\Local\Temp/ccnpLxT9.s:386    .text:00000172 i2c_read_ack
C:\Users\Thorsten\AppData\Local\Temp/ccnpLxT9.s:426    .text:00000198 i2c_read_nack
C:\Users\Thorsten\AppData\Local\Temp/ccnpLxT9.s:469    .text:000001be i2c_transmit
C:\Users\Thorsten\AppData\Local\Temp/ccnpLxT9.s:932    .text:00000436 i2c_stop
C:\Users\Thorsten\AppData\Local\Temp/ccnpLxT9.s:571    .text:00000242 i2c_receive
C:\Users\Thorsten\AppData\Local\Temp/ccnpLxT9.s:692    .text:000002ea i2c_writeReg
C:\Users\Thorsten\AppData\Local\Temp/ccnpLxT9.s:800    .text:00000376 i2c_readReg

NO UNDEFINED SYMBOLS
